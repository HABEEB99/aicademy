// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER 
  ADMIN
}
model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          Role      @default(USER) 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Course{
  id                 String   @id @default(cuid())
  userId             String
  title              String   @db.Text
  description        String?  @db.Text
  imageUrl           String?  @db.Text
  price              Float?
  isPublished        Boolean  @default(false)

  categoryId         String?
  category           Category? @relation(fields: [categoryId], references: [id])

  sections           Section[]
  attachments        Attachment[]
  transactions       Transaction[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([categoryId])
}

model Category{
  id                 String   @id @default(cuid())
  name               String
  courses            Course[] 
}

model Attachment{
  id                 String   @id @default(cuid())
  name               String
  url                String   @db.Text
  description        String?  @db.Text

  courseId           String
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 

  @@index([courseId]) 
}


model Section{
  id                 String   @id @default(cuid())
  title              String 
  videoUrl           String?  @db.Text
  description        String?  @db.Text
  position           Int
  isPublished        Boolean  @default(false)
  isFree             Boolean  @default(false)

  muxData            MuxData?

  courseId           String
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)


  userProgress       UserProgress[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 
  @@index([courseId])
}


model MuxData{
  id                 String   @id @default(cuid())
  assetId            String 
  playbackId         String? 

  sectionId           String    @unique
  section             Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
}


model UserProgress{
  id                 String   @id @default(cuid())
  userId             String 
  
  isCompleted        Boolean  @default(false)
  
  sectionId          String
  section            Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 

  @@index([sectionId])
  @@unique([userId, sectionId])
}



model Transaction{
  id                 String   @id @default(cuid())
  userId             String
  
  courseId           String
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 

  @@index([courseId])  
}


model StripeCustomer{
  id                 String   @id @default(cuid())
  userId             String   @unique
  stripeCustomerId   String   @unique

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 
}